(function() {
  var ApkReader, BinaryXmlParser, ManifestParser, Promise, Zip;

  Zip = require('yauzl');

  Promise = require('bluebird');

  ManifestParser = require('./apkreader/parser/manifest');

  BinaryXmlParser = require('./apkreader/parser/binaryxml');

  ApkReader = (function() {
    ApkReader.MANIFEST = 'AndroidManifest.xml';

    ApkReader.open = function(apk) {
      return Promise.resolve(new ApkReader(apk));
    };

    function ApkReader(apk) {
      this.apk = apk;
    }

    ApkReader.prototype._open = function() {
      return Promise.fromCallback((function(_this) {
        return function(callback) {
          return Zip.open(_this.apk, {
            lazyEntries: true
          }, callback);
        };
      })(this));
    };

    ApkReader.prototype.usingFile = function(file, action) {
      return this.usingFileStream(file, function(stream) {
        var endListener, errorListener, readableListener;
        endListener = errorListener = readableListener = void 0;
        return new Promise(function(resolve, reject) {
          var chunks, totalLength, tryRead;
          chunks = [];
          totalLength = 0;
          tryRead = function() {
            var chunk;
            while (chunk = stream.read()) {
              chunks.push(chunk);
              totalLength += chunk.length;
            }
          };
          stream.on('readable', readableListener = function() {
            return tryRead();
          });
          stream.on('error', errorListener = function(err) {
            return reject(err);
          });
          return stream.on('end', endListener = function() {
            return resolve(Buffer.concat(chunks, totalLength));
          });
        }).then(action)["finally"](function() {
          stream.removeListener('readable', readableListener);
          stream.removeListener('error', errorListener);
          return stream.removeListener('end', endListener);
        });
      });
    };

    ApkReader.prototype.usingFileStream = function(file, action) {
      return this._open().then(function(zipfile) {
        var endListener, entryListener, errorListener;
        endListener = errorListener = entryListener = void 0;
        return new Promise(function(resolve, reject) {
          zipfile.on('entry', entryListener = function(entry) {
            if (entry.fileName === file) {
              return resolve(Promise.fromCallback(function(callback) {
                return zipfile.openReadStream(entry, callback);
              }));
            } else {
              return zipfile.readEntry();
            }
          });
          zipfile.on('end', endListener = function() {
            return reject(new Error("APK does not contain '" + file + "'"));
          });
          zipfile.on('error', errorListener = function(err) {
            return reject(err);
          });
          return zipfile.readEntry();
        }).then(action)["finally"](function() {
          zipfile.removeListener('entry', entryListener);
          zipfile.removeListener('error', errorListener);
          zipfile.removeListener('end', endListener);
          return zipfile.close();
        });
      });
    };

    ApkReader.prototype.readContent = function(path) {
      return this.usingFile(path, function(content) {
        return content;
      });
    };

    ApkReader.prototype.readManifest = function() {
      return this.usingFile(ApkReader.MANIFEST, function(content) {
        return new ManifestParser(content).parse();
      });
    };

    ApkReader.prototype.readXml = function(path) {
      return this.usingFile(path, function(content) {
        return new BinaryXmlParser(content).parse();
      });
    };

    return ApkReader;

  })();

  module.exports = ApkReader;

}).call(this);
